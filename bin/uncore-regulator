#!/usr/bin/env python3
import signal
import argparse
import logging
import importlib
import subprocess

from uncore_regulator.daemon import Daemon
from itertools import chain


def parse_range_list(rl):
    def parse_range(r):
        if len(r) == 0:
            return []
        parts = r.split("-")
        if len(parts) > 2:
            raise ValueError("Invalid range: {}".format(r))
        return range(int(parts[0]), int(parts[-1]) + 1)

    return set(chain.from_iterable(map(parse_range, rl.split(","))))


parser = argparse.ArgumentParser()
parser.add_argument(
    "-o",
    "--output",
    type=str,
    help="Specify a file where the meters will be logged (tab-separated).")
parser.add_argument(
    "cores",
    type=str,
    help=
    "list of physical core ids from which flop/s and memory usage will be metered"
)
parser.add_argument(
    "sockets",
    type=str,
    help=
    "list of physical sockets ids from which uncore frequency and power will be metered"
)
parser.add_argument(
    "-r",
    "--regulator",
    type=str,
    help=
    "Regulator to use. Availiable regulators are in the uncore_regulators/regulators folder."
)
parser.add_argument("-t",
                    dest="t",
                    type=float,
                    help="Time between two measurements (in seconds)",
                    default=1.)
parser.add_argument("-e", "--exec", type=str, help="Command to execute")

args = parser.parse_args()

cores = parse_range_list(args.cores)
sockets = parse_range_list(args.sockets)

logging.basicConfig(level=logging.DEBUG)

d = Daemon(cores=cores, sockets=sockets, sleep_dt=args.t, outfile=args.output)

if args.regulator:
    logging.info("Loading regulator {}".format(args.regulator))
    r_module = importlib.import_module("uncore_regulator.regulators." +
                                       args.regulator)
    d.set_regulator(getattr(r_module, args.regulator)())
else:
    logging.info("No regulator loaded")


def exit_handler(sig, frame):
    logging.info("Stopping daemon...")
    d.stop.set()

signal.signal(signal.SIGINT, exit_handler)

d.start()

if args.exec:
    subprocess.run(args.exec, shell=True, check=True)
    d.stop.set()

d.join()

